@using System.Web.UI.WebControls
@model MVC_projekt.Models.BookItemViewModel
@{
    ViewBag.Title = @Resources.Global.Create;
}

@if (ViewBag.Error == true)
{
    <div class="alert alert-danger" role="alert">
        @Resources.Global.AddBookError
    </div>
}
<h2>Add</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ISBN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Descryption, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descryption, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descryption, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Publisher, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedAuthors, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <table>
                    <tr>
                        <td>
                            @Html.ListBoxFor(model => model.SelectedAuthors, ViewBag.Authors as SelectList, new { @class = "chosen-author-group-select", multiple = "multiple", style = "width:300px;" })
                        </td>
                        <td>
                            &emsp;
                        </td>
                        <td>
                            <button id="addAuthor" class="glyphicon-plus btn btn-block"></button>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedLabels, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <table>
                    <tr>
                        <td>
                            @Html.ListBoxFor(model => model.SelectedLabels, ViewBag.Labels as SelectList, new { @class = "chosen-label-group-select", multiple = "multiple", style = "width:300px;" })
                        </td>
                        <td>
                            &emsp;
                        </td>
                        <td>
                            <button id="addLabel" class="glyphicon-plus btn btn-block"></button>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div id="dialogAuthor">
    <table>
        <tr>
            <td>
                <label for="nameAuthor">@Resources.Global.FirstName</label>
            </td>
            <td>
                &emsp;
            </td>
            <td>
                <input type="text" name="name" id="nameAuthor" class="text ui-widget-content ui-corner-all">
            </td>
        </tr>
        <tr>
            <td><br /></td>
        </tr>
        <tr>
            <td>
                <label for="surname">@Resources.Global.Surname</label>
            </td>
            <td>
                &emsp;
            </td>
            <td>
                <input type="text" name="surname" id="surname" class="text ui-widget-content ui-corner-all">
            </td>
        </tr>
    </table>
    <br/>
    <button type="button" id="createAuthor" class="btn bg-success col-sm-offset-5">@Resources.Global.Submit</button>
</div>

<div id="dialogLabel">
    <table>
        <tr>
            <td>
                <label for="nameLabel">@Resources.Global.Name</label>
            </td>
            <td>
                &emsp;
            </td>
            <td>
                <input type="text" name="name" id="nameLabel" class="text ui-widget-content ui-corner-all">
            </td>
        </tr>
    </table>
    <br/>
    <button type="button" id="createLabel" class="btn bg-success col-sm-offset-5">@Resources.Global.Submit</button>
</div>



<div>
    @Html.ActionLink(@Resources.Global.BackButton, "Index", null, new { @class = "btn btn-primary" })
</div>
@section Scripts {
    <link href="~/Content/chosen.css" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/chosen.jquery.js")" type="text/javascript"></script>

    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

    <script>

        $(document)
            .ready(function () {
                $('.chosen-author-group-select').chosen();
                $('.chosen-label-group-select').chosen();
            });

        $(function () {
            var dialogAuthor, dialogLabel;

            function addAuthor() {
                var dataToPost = { name: $("#nameAuthor").val(), surname: $("#surname").val() };
                var url = "/Authors/Add";

                $.post(url, dataToPost)
                    .done(function (data) {
                        if (data != null) {
                            $('.chosen-author-group-select').append($("<option/>", { value: data.AuthorID, text: data.FullName }));
                            $('.chosen-author-group-select').val(data.AuthorID);
                            $('.chosen-author-group-select').trigger("chosen:updated");
                        }
                        dialogAuthor.dialog('close');

                    });
            }

            dialogAuthor = $("#dialogAuthor")
                .dialog({
                    autoOpen: false,
                    height: 200,
                    width: 300,
                    modal: true,
                    resizable: false
                });

            $("#addAuthor")
                .on("click",
                    function () {
                        $('#dialogAuthor').dialog('open');
                        return false;
                    });

            $("#createAuthor")
                .click(
                    function () {
                        addAuthor();
                    });


            @* LABEL *@
            function addLabel() {
                var dataToPost = { name: $("#nameLabel").val() };
                var url = "/Labels/Add";

                $.post(url, dataToPost)
                    .done(function (data) {
                        if (data != null) {
                            $('.chosen-label-group-select').append($("<option/>", { value: data.LabelID, text: data.Name }));
                            $('.chosen-label-group-select').val(data.LabelID);
                            $('.chosen-label-group-select').trigger("chosen:updated");
                        }
                        dialogLabel.dialog('close');

                    });
            }

            dialogLabel = $("#dialogLabel")
                .dialog({
                    autoOpen: false,
                    height: 150,
                    width: 300,
                    modal: true,
                    resizable: false
                });

            $("#addLabel")
                .on("click",
                    function () {
                        $('#dialogLabel').dialog('open');
                        return false;
                    });

            $("#createLabel")
                .click(
                    function () {
                        addLabel();
                    });

        });
    </script>

}